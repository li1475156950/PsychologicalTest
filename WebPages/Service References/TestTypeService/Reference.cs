//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPages.TestTypeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestTypeEntity", Namespace="http://schemas.datacontract.org/2004/07/BasicsServiceMODEL.TestTypeModel")]
    [System.SerializableAttribute()]
    public partial class TestTypeEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TTNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TTID {
            get {
                return this.TTIDField;
            }
            set {
                if ((this.TTIDField.Equals(value) != true)) {
                    this.TTIDField = value;
                    this.RaisePropertyChanged("TTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TTName {
            get {
                return this.TTNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TTNameField, value) != true)) {
                    this.TTNameField = value;
                    this.RaisePropertyChanged("TTName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestTypeService.ITestTypeService")]
    public interface ITestTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestTypeService/GetAllTestType", ReplyAction="http://tempuri.org/ITestTypeService/GetAllTestTypeResponse")]
        System.Collections.Generic.List<WebPages.TestTypeService.TestTypeEntity> GetAllTestType();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestTypeServiceChannel : WebPages.TestTypeService.ITestTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestTypeServiceClient : System.ServiceModel.ClientBase<WebPages.TestTypeService.ITestTypeService>, WebPages.TestTypeService.ITestTypeService {
        
        public TestTypeServiceClient() {
        }
        
        public TestTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<WebPages.TestTypeService.TestTypeEntity> GetAllTestType() {
            return base.Channel.GetAllTestType();
        }
    }
}
